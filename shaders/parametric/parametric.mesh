#version 460

#include "../shaderInterface.h"
#include "../stdPerVertexMesh.glsl"
#include "../noise.glsl"
#include "parametric.glsl"

layout(local_size_x = MESH_GROUP_SIZE) in;
layout(max_vertices = MAX_VERTICES, max_primitives = MAX_PRIMITIVES, triangles) out;

// Emits a vertex
void emitVertex(vec3 pos, vec3 normal, vec2 uv, uint vertexIndex) {
    perVertex[vertexIndex].worldPosU = vec4(pos.xyz, uv.x);
    perVertex[vertexIndex].normalV = vec4(normal.xyz, uv.y);

    gl_MeshVerticesEXT[vertexIndex].gl_Position = viewUbo.projection * viewUbo.view * constants.model * (vec4(pos, 1));
}

void emitSingleQuad(uint q, uvec4 indices) {
    uint index = 2 * q; // Each quad corresponds to 2 triangles

    gl_PrimitiveTriangleIndicesEXT[index + 0] = uvec3(indices.x, indices.y, indices.z);
    gl_PrimitiveTriangleIndicesEXT[index + 1] = uvec3(indices.x, indices.z, indices.w);

    uint taskId = taskPayload.taskId;
    uint patchId = gl_WorkGroupID.x * gl_NumWorkGroups.x + gl_WorkGroupID.y;

    uint colorMode = shadingUbo.colorMode;
    uint primId = 0;
    if (colorMode == 0) { // per task
        primId = taskId;
    } else if (colorMode == 1) { // per mesh
        primId = taskId + patchId;
    } else if (colorMode == 2) { // per primitive
        primId = taskId + patchId + index;
    }

    gl_MeshPrimitivesEXT[index + 0].gl_PrimitiveID = int(primId);
    gl_MeshPrimitivesEXT[index + 1].gl_PrimitiveID = int(primId);

    uvec4 perPrimitiveData;
#ifdef DISPLAY_DEBUG_DATA
    perPrimitiveData = uvec4(floatBitsToUint(taskPayload.debug.x), floatBitsToUint(taskPayload.debug.y), floatBitsToUint(taskPayload.debug.z), floatBitsToUint(taskPayload.debug.w));
#else
    perPrimitiveData = uvec4(taskPayload.taskId, floatBitsToUint(taskPayload.area), 0, 0);
#endif
    perPrimitive[index + 0].data = perPrimitiveData;
    perPrimitive[index + 1].data = perPrimitiveData;

    // gl_MeshPrimitivesEXT[index + 0].gl_CullPrimitiveEXT = true;
    // gl_MeshPrimitivesEXT[index + 1].gl_CullPrimitiveEXT = true;
}

void offsetVertex(in out vec3 pos, in out vec3 normal) {
    // scaling
    seed = taskPayload.taskId;

    pos *= sqrt(taskPayload.area) * resurfacingUbo.scaling;

    vec3 normal1 = resurfacingUbo.normal1;
    vec3 normal2 = resurfacingUbo.normal2;

    // normal perturbation
    seed = taskPayload.taskId;
    vec3 random1 = normalize(rand3(-1, 1));
    vec3 random2 = normalize(rand3(-1, 1));

    float scale = resurfacingUbo.normalPerturbation;

    normal1 += random1 * scale;
    normal2 += random2 * scale;

    normal1 = normalize(normal1);
    normal2 = normalize(normal2);

    // quick hack for demo :
    // orienting parametric cages (scales) correctly when displaying multiple element types
    if (resurfacingUbo.elementType >= 8 && taskPayload.elementType >= 8 && resurfacingUbo.hasElementTypeTexture) {
        normal1 = vec3(0, 1, 0.3);
        normal2 = vec3(0, 1, 0.3);
    }

    // Alternate rotation
    mat3 rotation = align_rotation_to_vector(normal1, taskPayload.normal);
    if (taskPayload.isVertex) {
        rotation = align_rotation_to_vector(normal2, taskPayload.normal);
    }

    pos = pos * rotation;
    normal = normal * rotation;

    // translate
    vec3 offset = vec3(0);
    offset += taskPayload.position;
    pos += offset;
}

void main() {
    LodInfos lodInfos;
    lodInfos.MVP = viewUbo.projection * viewUbo.view * constants.model;
    lodInfos.position = taskPayload.position;
    lodInfos.normal = taskPayload.normal;
    lodInfos.area = taskPayload.area;
    lodInfos.controlNormal = taskPayload.isVertex ? resurfacingUbo.normal2 : resurfacingUbo.normal1;

    uvec2 MN = taskPayload.MN;
    uvec2 deltaUV = taskPayload.deltaUV;

    uvec2 startUV = uvec2(gl_WorkGroupID.xy * deltaUV.xy);
    uvec2 localDeltaUV = min(deltaUV, MN - startUV);

    if (startUV.x >= MN.x || startUV.y >= MN.y) return;

    uint numVertices = (localDeltaUV.x + 1) * (localDeltaUV.y + 1);
    uint numPrimitives = localDeltaUV.x * localDeltaUV.y * 2;

    SetMeshOutputsEXT(numVertices, numPrimitives);

    // Sampling the parametric surface on a grid
    for (uint u = gl_LocalInvocationID.x; u <= localDeltaUV.x; u += MESH_GROUP_SIZE) {
        for (uint v = 0; v <= localDeltaUV.y; ++v) {
            // Element's local UV coordinates
            vec2 uvCoords = vec2(startUV + uvec2(u, v)) / vec2(MN);

            vec3 pos = vec3(0);
            vec3 normal = vec3(0, 0, 1);

            // Sample
            parametricPosition(uvCoords, pos, normal, taskPayload.elementType);

            // position, orientation, scale, surface noise ...
            offsetVertex(pos, normal);

            uint vertexIndex = u * (localDeltaUV.y + 1) + v;
            emitVertex(pos, normal, uvCoords, vertexIndex);
        }
    }

    // Emit quads
    for (uint u = gl_LocalInvocationID.x; u < localDeltaUV.x; u += MESH_GROUP_SIZE) {
        for (uint v = 0; v < localDeltaUV.y; ++v) {
            uint v00 = u * (localDeltaUV.y + 1) + v + 0;
            uint v01 = u * (localDeltaUV.y + 1) + v + 1;
            uint v10 = (u + 1) * (localDeltaUV.y + 1) + v + 0;
            uint v11 = (u + 1) * (localDeltaUV.y + 1) + v + 1;

            uint quadIndex = (u * localDeltaUV.y + v);

            emitSingleQuad(quadIndex, uvec4(v00, v10, v11, v01));
        }
    }
}
