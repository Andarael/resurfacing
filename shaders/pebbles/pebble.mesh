#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_EXT_debug_printf : enable

#include "pebble.glsl" // must be included before any other include

#include "../common.glsl"
#include "../shaderInterface.h"
#include "../stdPerVertexMesh.glsl"


#include "../noise.glsl"

// Build the scafolding:
// compute edgeID -> patchID//2;
// From patchID, compute VerticeIDs:
/*
    ?----?----?----? -> extruded from the patch
    |   /|   /|   /|
    |  / |  / |  / |
    | /  | /  | /  |
    ?----?----?----? -> extruded from original face
    |   /|   /|   /|
    |  / |  X |  / |
    | /  | /  | /  |
    x----?----x----? -> original face (+subdivision)
    |   /|   /|   /|
    |  / |  / |  / |
    | /  | /  | /  |
    ?----?----?----? -> extruded from original face
*/
// 2 case:
// if patchID - edgeID == 0:
// we need vertices at edgeID, nextFaceID, prevFaceID -> edgeID, (edgeID + 1) % maxVert, (edgeID - 1 + maxVert) % maxVert;
// we need midpoint between edgeID and nextFaceID, edgeID and prevFaceID -> mid0 = (edgeID + nextFaceID) / 2, mid1 = (edgeID + prevFaceID) / 2;
// we extrude mid1, edgeID, mid0, nextFaceID along faceNormal. In positive and negative direction. in the end we have a 4x4 grid of vertices.

// if patchID - edgeID == 1:
// we need vertices at edgeID, nextFaceID, nextFaceID2 -> edgeID, (edgeID + 1) % maxVert, (edgeID + 2 + maxVert) % maxVert;
// we need midpoint between edgeID and nextFaceID, nextFaceID and nextFaceID2 -> mid0 = (edgeID + nextFaceID) / 2, mid1 = (nextFaceID + nextFaceID2) / 2;
// we extrude edgeID, mid0, nextFaceID, mid1 along faceNormal. In positive and negative direction. in the end we have a 4x4 grid of vertices.

// call subdivide b-spline on the 4x4 grid of vertices.

// ==================== Mesh Shader Specific ====================

#define MESH_MAX_VERTICES 81    // (2 ^ MAX_SUBDIVISION_LEVEL +1)^2
#define MESH_MAX_PRIMITIVES 128 // 2 * (4 ^ MAX_SUBDIVISION_LEVEL)

layout(local_size_x = 32) in;
layout(max_vertices = MESH_MAX_VERTICES, max_primitives = MESH_MAX_PRIMITIVES, triangles) out;

// ==================== Pipelined data ====================

taskPayloadSharedEXT Task IN;

// ==================== Uniforms ====================

shared vec3[16] sharedVertices; // grid of 4x4 control vertices
shared vec3[16] sharedNormals;  // normals of the control vertices

// ==================== Main ====================

vec2 indexToUV(uint index, uint trueSubdivisionLevel, uint gridSize, uint subPatchIndex) {
    // Convert the 1D index to 2D position (i.e., calculate the row and column)
    uint x = index % gridSize;
    uint y = index / gridSize;

    vec2 uv = vec2(float(x) / float(gridSize - 1), float(y) / float(gridSize - 1));
    if (trueSubdivisionLevel > 3) {
        uint groupSize = uint(pow(2, trueSubdivisionLevel - 3)); // Size of the virtual grid of workgroups
        float scale = 1.0 / float(groupSize);                    // Scale for the UV coordinates

        uint groupPosX = subPatchIndex % groupSize; // X position of the workgroup inside the virtual grid
        uint groupPosY = subPatchIndex / groupSize; // Y position of the workgroup inside the virtual grid

        // Apply scale and shift to the UV coordinates
        uv = scale * uv + vec2(scale * float(groupPosX), scale * float(groupPosY));
    }
    return uv;
}

const mat4 BSPLINE_MATRIX_4 = mat4(
    vec4(1 / 6., 4 / 6., 1 / 6., 0.),
    vec4(-3 / 6., 0., 3 / 6., 0.),
    vec4(3 / 6., -6 / 6., 3 / 6., 0.),
    vec4(-1 / 6., 3 / 6., -3 / 6., 1 / 6.));

vec4 computeBSplinePoint(float t, vec4 P0, vec4 P1, vec4 P2, vec4 P3) {
    vec4 basis = BSPLINE_MATRIX_4 * vec4(1.0, t, t * t, t * t * t);
    return basis.x * P0 + basis.y * P1 + basis.z * P2 + basis.w * P3;
}
vec4 computeBSplinePoint(float t, uint offset) {
    return computeBSplinePoint(t, vec4(sharedVertices[offset * 4 + 0], 1.0),
                               vec4(sharedVertices[offset * 4 + 1], 1.0),
                               vec4(sharedVertices[offset * 4 + 2], 1.0),
                               vec4(sharedVertices[offset * 4 + 3], 1.0));
}

vec3 computeBSplineSurfPoint(vec2 uv) {
    return computeBSplinePoint(uv.y,
                               computeBSplinePoint(uv.x, 0),
                               computeBSplinePoint(uv.x, 1),
                               computeBSplinePoint(uv.x, 2),
                               computeBSplinePoint(uv.x, 3))
        .xyz;
}

void computeNormal() {
    vec3 tangentU, tangentV;
    vec3 normal;

    if (lid == 5) {
        // Point 5: Use points 1, 9 for vertical tangent and 4, 6 for horizontal tangent
        tangentU = sharedVertices[6] - sharedVertices[4]; // Points 6 - 4
        tangentV = sharedVertices[9] - sharedVertices[1]; // Points 9 - 1
    } else if (lid == 6) {
        // Point 6: Use points 2, 10 for vertical tangent and 5, 7 for horizontal tangent
        tangentU = sharedVertices[7] - sharedVertices[5];  // Points 7 - 5
        tangentV = sharedVertices[10] - sharedVertices[2]; // Points 10 - 2
    } else if (lid == 9) {
        // Point 9: Use points 5, 13 for vertical tangent and 8, 10 for horizontal tangent
        tangentU = sharedVertices[10] - sharedVertices[8]; // Points 10 - 8
        tangentV = sharedVertices[13] - sharedVertices[5]; // Points 13 - 5
    } else if (lid == 10) {
        // Point 10: Use points 6, 14 for vertical tangent and 9, 11 for horizontal tangent
        tangentU = sharedVertices[11] - sharedVertices[9]; // Points 11 - 9
        tangentV = sharedVertices[14] - sharedVertices[6]; // Points 14 - 6
    }

    // Compute the normal using the cross product of tangents
    normal = -normalize(cross(tangentU, tangentV));

    // Store the computed normal
    sharedNormals[lid] = normal;
}

void emitVertex(vec3 pos, vec3 normal, vec2 uv, uint vertexIndex) {
    vec3 center = getFaceCenter(IN.baseID);

    float angle = pebbleUbo.time * pebbleUbo.rotationSpeed;
    float cosTheta = cos(angle);
    float sinTheta = sin(angle);
    float oneMinusCosTheta = 1.0 - cosTheta;
    vec3 axis = vec3(1, 0, 0);
    mat3 rotation = mat3(
        cosTheta + oneMinusCosTheta * axis.x * axis.x,
        oneMinusCosTheta * axis.x * axis.y - sinTheta * axis.z,
        oneMinusCosTheta * axis.x * axis.z + sinTheta * axis.y,

        oneMinusCosTheta * axis.y * axis.x + sinTheta * axis.z,
        cosTheta + oneMinusCosTheta * axis.y * axis.y,
        oneMinusCosTheta * axis.y * axis.z - sinTheta * axis.x,

        oneMinusCosTheta * axis.z * axis.x - sinTheta * axis.y,
        oneMinusCosTheta * axis.z * axis.y + sinTheta * axis.x,
        cosTheta + oneMinusCosTheta * axis.z * axis.z);

    vec3 desiredPos = pos;
    vec3 desiredNormal = normal.xyz;

    desiredPos = (desiredPos - center) * IN.scale + center;

    if (pebbleUbo.doNoise) {
        PerlinNoise3D noise = perlinNoise3D(pos * pebbleUbo.noiseFrequency);
        desiredPos += noise.value * desiredNormal * pebbleUbo.noiseAmplitude * IN.scale;
        desiredNormal += noise.gradient * pebbleUbo.normalOffset;
        desiredNormal = normalize(desiredNormal);
    }

    if (pebbleUbo.enableRotation) {
        vec3 objectCenter = vec3(0, -5, 0);
        desiredPos -= objectCenter;
        desiredPos = rotation * desiredPos;
        desiredNormal = rotation * desiredNormal;
        desiredPos += objectCenter;
    }

    perVertex[vertexIndex].worldPosU = vec4(desiredPos, uv.x);
    perVertex[vertexIndex].normalV = vec4(desiredNormal.xyz, uv.y);

    gl_MeshVerticesEXT[vertexIndex].gl_Position = viewUbo.projection * viewUbo.view * constants.model * (vec4(desiredPos, 1));
}

void emitSingleQuad(uint q, uvec4 indices) {
    uint index = 2 * q; // Each quad corresponds to 2 triangles

    gl_PrimitiveTriangleIndicesEXT[index + 0] = uvec3(indices.x, indices.y, indices.z);
    gl_PrimitiveTriangleIndicesEXT[index + 1] = uvec3(indices.x, indices.z, indices.w);

    uint taskId = IN.baseID;
    uint patchId = gl_WorkGroupID.x * gl_NumWorkGroups.x + gl_WorkGroupID.y;

    uint colorMode = shadingUbo.colorMode;
    uint primId = 0;
    if (colorMode == 0) { // per task
        primId = taskId;
    } else if (colorMode == 1) { // per mesh
        primId = taskId + patchId;
    } else if (colorMode == 2) { // per primitive
        primId = taskId + patchId + index;
    }

    gl_MeshPrimitivesEXT[index + 0].gl_PrimitiveID = int(primId);
    gl_MeshPrimitivesEXT[index + 1].gl_PrimitiveID = int(primId);

    perPrimitive[index + 0].data = uvec4(IN.baseID, 0, 0, 0);
    perPrimitive[index + 1].data = uvec4(IN.baseID, 0, 0, 0);

    // gl_MeshPrimitivesEXT[index + 0].gl_CullPrimitiveEXT = true;
    // gl_MeshPrimitivesEXT[index + 1].gl_CullPrimitiveEXT = true;
}

// ==================== Tessellation ====================

void main() {
    // we can have different workgroups working on the same global patch
    // But we can also have different workgroups working on different patches
    // so we need to know which patch we are working on

    uint N = IN.targetSubdivLevel;
    uint baseID = IN.baseID;
    fetchFaceData(baseID);
    vec3 center = getFaceCenter(baseID);
    vec3 faceNormal = getFaceNormal(baseID);

    if (subgroupAll(N == 0)) {
        // extrude the face along the normal
        float extrusionAmount = pebbleUbo.extrusionAmount;

        SetMeshOutputsEXT(vertCount * 2, vertCount * 2 + vertCount - 2);

        for (uint i = 0; i < vertCount; i++) {
            vec3 originalPosition = getVertexPosShared(i);
            vec3 extrudedPosition = originalPosition + extrusionAmount * faceNormal;
            vec3 normal = normalize(originalPosition - center);
            emitVertex(originalPosition, normal, vec2(0), i);
            emitVertex(extrudedPosition, faceNormal, vec2(0), vertCount + i);
        }

        // side faces
        for (uint i = 0; i < vertCount; i++) {
            uint i_right = (i + 1) % vertCount;
            emitSingleQuad(i, uvec4(i, i + vertCount, i_right + vertCount, i_right));
        }

        // top face
        uint offset = vertCount * 2;
        for (int i = 0; i < vertCount - 2; i++) {
            gl_PrimitiveTriangleIndicesEXT[offset + i] = uvec3(vertCount, vertCount + i + 1, vertCount + i + 2);
            gl_MeshPrimitivesEXT[offset + i].gl_PrimitiveID = int(offset + i);
            perPrimitive[offset + i].data = uvec4(IN.baseID, 0, 0, 0);
        }

    } else {
        N -= 1;
        uint subPatchCount = 1;
        uint subPatchCountLine = 1;
        if (N > MAX_SUBDIV_PER_WORKGROUP)
            subPatchCount = uint(pow(4, N - MAX_SUBDIV_PER_WORKGROUP));
        subPatchCountLine = uint(pow(2, N - MAX_SUBDIV_PER_WORKGROUP));
        uint patchID = groupId / subPatchCount;
        uint ringID = patchID / (vertCount * 2);

        if (subgroupAll(ringID <= 2)) {

            uint subPatchIndex = groupId % subPatchCount;
            uint edgeID = (patchID / 2) % (vertCount);

            if (subgroupElect()) {
                if ((patchID % 2) == 0) {
                    uint nextFaceID = (edgeID + 1) % vertCount;
                    uint prevFaceID = (edgeID - 1 + vertCount) % vertCount;
                    sharedVertices[13] = getVertexPosShared(edgeID);
                    sharedVertices[15] = getVertexPosShared(nextFaceID);
                    sharedVertices[12] = (getVertexPosShared(prevFaceID) + sharedVertices[13]) / 2.;
                    sharedVertices[14] = (sharedVertices[13] + sharedVertices[15]) / 2.;

                } else { // (groupId - edgeID) == 1
                    uint nextFaceID = (edgeID + 1) % vertCount;
                    uint nextFaceID2 = (edgeID + 2 + vertCount) % vertCount;
                    sharedVertices[12] = getVertexPosShared(edgeID);
                    sharedVertices[14] = getVertexPosShared(nextFaceID);
                    sharedVertices[15] = (getVertexPosShared(nextFaceID2) + sharedVertices[14]) / 2.;
                    sharedVertices[13] = (sharedVertices[12] + sharedVertices[14]) / 2.;
                }
            }
            barrier();

            // extrude mid1, edgeID, mid0, nextFaceID along faceNormal
            seed = IN.baseID;
            float minLevel = pebbleUbo.extrusionAmount * (1.0 - pebbleUbo.extrusionVariation);
            float maxLevel = pebbleUbo.extrusionAmount * (1.0 + pebbleUbo.extrusionVariation);
            float randomizedExtrusion = rand(minLevel, maxLevel);

            float roundness = mix(.95, .5, pebbleUbo.roundness);
            float extrusionAmount = randomizedExtrusion;

            uint offset = ringID * 4;   // Base offset for the current ring
            uint vertexIndex = lid % 4; // Determine which vertex this thread is handling

            if (lid < 4) {
                sharedVertices[offset + lid] = sharedVertices[12 + vertexIndex] + extrusionAmount * faceNormal;
                if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                    sharedNormals[offset + lid] = mix(sharedVertices[12 + vertexIndex] - center, faceNormal, roundness);
                }
            } else if (lid < 8) {
                if (subgroupAll(ringID < 2)) {
                    sharedVertices[offset + lid] = sharedVertices[12 + vertexIndex] + roundness * extrusionAmount * faceNormal;
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[offset + lid] = normalize(sharedVertices[12 + vertexIndex] - center);
                    }
                } else if (subgroupAll(ringID == 2)) {
                    sharedVertices[vertexIndex] = center + (2 * pebbleUbo.fillradius - 1) * (sharedVertices[12 + vertexIndex] - center) + extrusionAmount * faceNormal;
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[vertexIndex] = faceNormal;
                    }
                }
            } else if (lid < 12) {
                if (subgroupAll(ringID == 0)) {
                    sharedVertices[lid] = sharedVertices[12 + vertexIndex];
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[lid] = normalize(sharedVertices[12 + vertexIndex] - center);
                    }
                } else if (subgroupAll(ringID == 1)) {
                    sharedVertices[vertexIndex] = center + pebbleUbo.fillradius * (sharedVertices[12 + vertexIndex] - center) + extrusionAmount * faceNormal;
                } else if (subgroupAll(ringID == 2)) {
                    sharedVertices[vertexIndex + 4] = center + pebbleUbo.fillradius * (sharedVertices[12 + vertexIndex] - center) + extrusionAmount * faceNormal;
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[vertexIndex + 4] = faceNormal;
                    }
                }
            } else if (lid < 16) {
                if (subgroupAll(ringID == 0)) {
                    sharedVertices[lid] = sharedVertices[12 + vertexIndex] - roundness * extrusionAmount * faceNormal;
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[offset + lid] = normalize(sharedVertices[12 + vertexIndex] - center);
                    }
                } else if (subgroupAll(ringID == 2)) {
                    sharedVertices[lid] = sharedVertices[12 + vertexIndex] + roundness * extrusionAmount * faceNormal;
                    if (subgroupAll(pebbleUbo.normalCalculationMethod == 1)) {
                        sharedNormals[lid] = mix(sharedVertices[12 + vertexIndex] - center, faceNormal, roundness);
                    }
                }
            }
            barrier();
            if (subgroupAll(pebbleUbo.normalCalculationMethod == 0)) {
                if (lid == 5 || lid == 6 || lid == 9 || lid == 10) { // Only compute for points 5, 6, 9, 10
                    computeNormal();
                }
                barrier();
            }

            uint resolution = uint(pow(2, min(N, 3)) + 1);
            uint nbVertices = resolution * resolution;
            uint grid_size = min(resolution, 9); // 9 is the max grid size supported by N=3
            uint quad_count = grid_size - 1;     // There are grid_size - 1 quads in each row/column
            SetMeshOutputsEXT(min(nbVertices, MESH_MAX_VERTICES), min(quad_count * quad_count * 2, MESH_MAX_PRIMITIVES));

            // =============== Vertex Loop ===============

            uint verticesPerThread = (nbVertices + workgroupSize - 1) / workgroupSize;
            for (uint v = 0; v < verticesPerThread; ++v) {
                uint vertexIndex = lid * verticesPerThread + v;
                if (vertexIndex >= nbVertices || vertexIndex >= MAX_VERTICES) continue;

                // Compute UV coordinates for current vertex
                vec2 uv = indexToUV(vertexIndex, N, grid_size, subPatchIndex);

                vec3 vertexPosition;
                vec3 vertexNormal;
                uint span = 1 << pebbleUbo.subdivOffset; // Span of true vertices, which is 2^levelDifference
                uint minRequiredVertices = span + 1;     // At least 2^n + 1 vertices are needed

                if (subgroupAll(ringID == 2 && subPatchIndex < subPatchCountLine) && uv.y == 0.0 && resolution >= minRequiredVertices) {
                    // Check if the vertex index is within the span to be corrected
                    uint localPos = vertexIndex % span;
                    if (localPos != 0) {
                        // Vertex needs correction; perform linear interpolation correction
                        // Find previous and next neighbors at the span distance
                        uint prevIndex = vertexIndex - (vertexIndex % span); // Nearest previous multiple of span
                        uint nextIndex = prevIndex + span;                   // Next multiple of span

                        // Ensure the neighbors are within bounds
                        if (prevIndex >= 0 && nextIndex < nbVertices) {
                            // Get UVs for the neighboring vertices
                            vec2 uvPrev = indexToUV(prevIndex, N, grid_size, subPatchIndex);
                            vec2 uvNext = indexToUV(nextIndex, N, grid_size, subPatchIndex);

                            // Compute B-spline points for the neighboring vertices
                            vec3 vertexPosPrev = computeBSplineSurfPoint(uvPrev);
                            vec3 vertexPosNext = computeBSplineSurfPoint(uvNext);

                            // Linear interpolation for midpoint correction
                            vertexPosition = mix(vertexPosPrev, vertexPosNext, float(localPos) / float(span));
                            vertexNormal = normalize(lerp(uv, sharedNormals[5], sharedNormals[6], sharedNormals[9], sharedNormals[10]));
                        }
                    } else {
                        // Vertex is on a true position according to the span; compute normally
                        vertexPosition = computeBSplineSurfPoint(uv);
                        vertexNormal = normalize(lerp(uv, sharedNormals[5], sharedNormals[6], sharedNormals[9], sharedNormals[10]));
                    }
                } else {
                    // Compute normally for all other vertices (not on the first edge)
                    vertexPosition = computeBSplineSurfPoint(uv);
                    vertexNormal = normalize(lerp(uv, sharedNormals[5], sharedNormals[6], sharedNormals[9], sharedNormals[10]));
                }

                emitVertex(vertexPosition, vertexNormal, uv, vertexIndex);
            }

            // =============== Primitive Loop ===============
            uint primitivesPerThread = (quad_count * quad_count + workgroupSize - 1) / workgroupSize;
            for (uint p = 0; p < primitivesPerThread; ++p) {
                uint index = lid * primitivesPerThread + p;

                uint x = index % quad_count;
                uint y = index / quad_count;

                uint i = y * grid_size + x; // Calculate the starting index for this quad

                // Calculate the other indices for this quad
                uint i_right = i + 1;
                uint i_down = i + grid_size;
                uint i_diag = i_down + 1;

                // Define the two triangles for this quad
                uint baseIndex = (y * quad_count + x);

                if (baseIndex * 2 >= MESH_MAX_PRIMITIVES * 3) continue;

                emitSingleQuad(baseIndex, uvec4(i, i_down, i_diag, i_right));
            }
        } else {
            uint resolution = uint(pow(2, min(N - pebbleUbo.subdivOffset, 5)) + 1); // Number of samples per subdivided edge
            uint subdividedEdgeID = groupId % (vertCount * 2);                      // Adjusted to reflect processing when ringID >= 3
            uint edgeID = subdividedEdgeID / 2;                                     // Original edge index
            uint nextEdgeID = (edgeID + 1) % vertCount;                             // Next original edge index

            // Gather only the required vertices for this edge and its neighbors
            vec3 vertA = center + pebbleUbo.fillradius * (getVertexPosShared(edgeID) - center) + faceNormal * pebbleUbo.extrusionAmount;
            vec3 vertB = center + pebbleUbo.fillradius * (getVertexPosShared(nextEdgeID) - center) + faceNormal * pebbleUbo.extrusionAmount;
            vec3 P0, P1, P2, P3; // Control points for the B-Spline

            // Calculate the vertices for the B-Spline
            vec3 prevVert, nextNextVert;
            if (subdividedEdgeID % 2 == 0) {
                // Previous vertex for the first half of the edge
                uint prevEdgeID = (edgeID - 1 + vertCount) % vertCount;
                prevVert = center + pebbleUbo.fillradius * (getVertexPosShared(prevEdgeID) - center) + faceNormal * pebbleUbo.extrusionAmount;
                nextNextVert = vertB; // End of the first half of the edge

                // Set control points for the first half
                P0 = (prevVert + vertA) * 0.5; // Average of previous and current vertex
                P1 = vertA;                    // Start vertex of the current edge
                P2 = (vertA + vertB) * 0.5;    // Midpoint of the current edge
                P3 = vertB;                    // End vertex of the current edge
            } else {
                // Next-next vertex for the second half of the edge
                uint nextNextEdgeID = (nextEdgeID + 1) % vertCount;
                prevVert = vertA; // Start of the second half of the edge
                nextNextVert = center + pebbleUbo.fillradius * (getVertexPosShared(nextNextEdgeID) - center) + faceNormal * pebbleUbo.extrusionAmount;

                // Set control points for the second half
                P0 = vertA;                        // Start vertex of the current edge
                P1 = (vertA + vertB) * 0.5;        // Midpoint of the current edge
                P2 = vertB;                        // End vertex of the current edge
                P3 = (vertB + nextNextVert) * 0.5; // Average of end and next-next vertex
            }

            // Calculate number of vertices to emit for this workgroup
            uint verticesPerEdge = resolution;                                      // Number of vertices per subdivided edge
            uint nbOuterVertices = verticesPerEdge;                                 // Outer vertices for the quad ring
            uint nbInnerVertices = verticesPerEdge;                                 // Inner vertices for the quad ring
            uint nbCenterVertices = 1;                                              // Center vertex for the triangle fan
            uint nbVertices = nbOuterVertices + nbInnerVertices + nbCenterVertices; // Total vertices
            uint nbQuads = verticesPerEdge - 1;                                     // Quads formed between consecutive vertices of the ring
            uint nbTriangles = verticesPerEdge - 1;                                 // Triangles formed between consecutive inner vertices and the center
            SetMeshOutputsEXT(nbVertices, nbQuads * 2 + nbTriangles);               // Set outputs for the current workgroup

            // Define a central vertex for the triangle fan at the center of the face
            vec3 fanCenter = center + faceNormal * pebbleUbo.extrusionAmount;
            emitVertex(fanCenter, faceNormal, vec2(0), nbOuterVertices + nbInnerVertices);

            // Emit outer and inner vertices for the current subdivided edge using B-Spline
            for (uint v = 0; v < verticesPerEdge; ++v) {
                float t = float(v) / float(resolution - 1); // Normalize t in range [0, 1]

                // Compute outer vertex
                vec3 outerVertexPosition = computeBSplinePoint(t, vec4(P0, 1.0), vec4(P1, 1.0), vec4(P2, 1.0), vec4(P3, 1.0)).xyz;
                vec3 directionToCenter = fanCenter - outerVertexPosition;
                vec3 innerVertexPosition = outerVertexPosition + directionToCenter * pebbleUbo.ringoffset;

                emitVertex(outerVertexPosition, faceNormal, vec2(0), v);
                emitVertex(innerVertexPosition, faceNormal, vec2(0), nbOuterVertices + v);
            }

            // Emit indices for the quad ring
            for (uint v = 0; v < verticesPerEdge - 1; ++v) { // Emit only (verticesPerEdge - 1) quads
                uint outerV0 = v;
                uint outerV1 = v + 1;
                uint innerV0 = nbOuterVertices + v;
                uint innerV1 = nbOuterVertices + v + 1;
                emitSingleQuad(v, uvec4(outerV0, outerV1, innerV1, innerV0));
            }

            // Emit indices for the triangle fan for this subdivided edge
            for (uint v = 0; v < verticesPerEdge - 1; ++v) { // Emit only (verticesPerEdge - 1) triangles
                uint innerV0 = nbOuterVertices + v;
                uint innerV1 = nbOuterVertices + v + 1;
                gl_PrimitiveTriangleIndicesEXT[nbQuads * 2 + v] = uvec3(nbOuterVertices + nbInnerVertices, innerV0, innerV1); // Triangle with center and two consecutive inner vertices
                gl_MeshPrimitivesEXT[nbQuads * 2 + v].gl_PrimitiveID = int(baseID + subdividedEdgeID * (verticesPerEdge - 1) + v + nbQuads * 2);
                perPrimitive[nbQuads * 2 + v].data = uvec4(baseID, 0, 0, 0);
            }
        }
    }
}